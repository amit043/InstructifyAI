version: "3.9"
services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_PASSWORD: labeler
      POSTGRES_USER: labeler
      POSTGRES_DB: labeler
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U labeler"]
      interval: 10s
      retries: 5

  redis:
    image: redis:7
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      retries: 5

  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio-data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      retries: 5

  api:
    build: .
    ports:
      - "8000:8000"
    env_file: .env
    environment:
      ENABLE_ADAPTERS_API: "true"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      retries: 5
    volumes:
      - .:/app

  worker:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker
    command: celery -A worker.main worker --loglevel=info -Q celery
    env_file: .env
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "celery -A worker.main inspect ping -t 1 > /dev/null"]
      interval: 10s
      retries: 5
    volumes:
      - .:/app

  worker_ocr:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker
    command: celery -A worker.main worker --loglevel=info -Q ocr -c ${OCR_WORKER_CONCURRENCY:-1}
    env_file: .env
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "celery -A worker.main inspect ping -t 1 > /dev/null"]
      interval: 10s
      retries: 5
    volumes:
      - .:/app

  gen:
    build:
      context: .
      args:
        ENABLE_TRAINING: "0"
        ENABLE_LLAMA_CPP: "0"
    command: bash -lc "python scripts/serve_local.py"
    env_file: .env
    environment:
      BASE_BACKEND: "hf"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    ports:
      - "9009:9009"
    volumes:
      - .:/app

  trainer:
    build:
      context: .
      args:
        ENABLE_TRAINING: "1"
        ENABLE_LLAMA_CPP: "0"
    # Start idle by default; ad-hoc jobs via `docker compose run`
    command: bash -lc "tail -f /dev/null"
    env_file: .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    volumes:
      - .:/app
      - hf-cache:/root/.cache/huggingface
    profiles: ["train"]

  labelstudio:
    image: heartexlabs/label-studio:latest
    ports:
      - "8080:8080"
    volumes:
      - ls-data:/label-studio/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 10s
      retries: 10

volumes:
  hf-cache:
  postgres-data:
  redis-data:
  minio-data:
  ls-data:

  
  
  
  
  
  
  
  
  
  
  
  
  
  

  
  
  
  
  
  
  
  
  
  
  
  
  
  
